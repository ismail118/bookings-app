{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>My nice page</title>

        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-aFq/bzH65dt+w6FI2ooMVUpc+21e0SRygnTpmBvdBgSdnuTN7QbdgL+OapgHtvPp" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.1/dist/css/datepicker-bs5.min.css">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <link rel="stylesheet" type="text/css" href="/static/css/styles.css">

    </head>
    </head>
    <body>

    <nav class="navbar navbar-expand-lg bg-body-tertiary bg-dark" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Rooms
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/room-one">Room One</a></li>
                            <li><a class="dropdown-item" href="/room-two">Room Two</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    {{block "css" .}}

    {{end}}


    {{block "content" .}}

    {{end}}


    <div class="row my-footer">
        <div class="col">Left</div>
        <div class="col">Middle</div>
        <div class="col">Right</div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/js/bootstrap.min.js" integrity="sha384-heAjqF+bCxXpCWLa6Zhcp4fu20XoNIA98ecBC1YkdXhszjoejr5y9Q77hIrv8R9i" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.1/dist/js/datepicker-full.min.js">
        // doc https://mymth.github.io/vanillajs-datepicker/#/options
    </script>
    <script src="https://unpkg.com/notie">
        // doc https://github.com/jaredreich/notie
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11">
        // doc https://sweetalert2.github.io/#download
    </script>

    {{block "js" .}}

    {{end}}

    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function() {
            'use strict'
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                const forms = document.querySelectorAll('.needs-validation')

                // Loop over them and prevent submission
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
            })
        })()

        function notify(msg, mysType) {
            notie.alert({
                type: mysType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
                text: msg,
            })
        }

        function notifyModel(title, text, icon, confirmButtonText) {
            Swal.fire({
                title: title,
                text: text,
                icon: icon,
                confirmButtonText: confirmButtonText
            })
        }

        {{with .Error}}
        notify("{{.}}", "error");
        {{end}}

        {{with .Flash}}
        notify("{{.}}", "success");
        {{end}}

        {{with .Warning}}
        notify("{{.}}", "warning");
        {{end}}

        function Prompt() {
            let toast = function(c) {
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                } = c;
                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }

            let success = function(c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c;

                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer,
                })
            }

            let error = function(c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c;

                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: msg,
                    footer: footer,
                })
            }

            async function custom(c) {
                const {
                    icon = "",
                    msg = "",
                    title = "",
                    showConfirmButton = true,
                } = c;

                const { value: result } = await Swal.fire({
                    icon: icon,
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    showConfirmButton: showConfirmButton,
                    willOpen: () => {
                        if (c.willOpen !== undefined) {
                            c.willOpen()
                        }
                    },
                    didOpen: () => {
                        if (c.didOpen !== undefined) {
                            c.didOpen()
                        }
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById('start').value,
                            document.getElementById('end').value
                        ]
                    }
                })

                if (result) {
                    if (result.dismiss !== Swal.DismissReason.cancel) {
                        if (result.value !== "") {
                            if (c.callback !== undefined) {
                                c.callback(result);
                            }
                        } else {
                            c.callback(false);
                        }
                    } else {
                        c.callback(false);
                    }
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }
        }

        let attention = Prompt();

    </script>
    </body>
    </html>
{{end}}